processFlowProvision (aka:  PFP)

JA Bride


ASSUMPTIONS
    - you are a RHCE (or equivalent in a Unix environment)
    - you are installing on Fedora 17/18/19 or Red Hat Enterprise Linux (RHEL) 6.*


OVERVIEW
    - PFP offers BRMS administrators & developers the following :
      1)  this document which outlines the entire provisioning process of one example of a production BRMS deployable environment
        - NOTE:  the tasks outlined in this document are written in sequential order
        - subsequently, it's best to start at the beginning of this document and progress in the order this doc is written
        - this document includes the following chapters:
            1)  ASSUMPTIONS
            2)  OVERVIEW
            3)  INSTALL
            4)  POST INSTALL ADMINISTRATION

      2)  an ant script which is executed as part of this BRMS deployable provisioning
        - what does the ant script do ?
            - once Apache Ant 1.8.3 has been installed (as outlined below in this document), 
              you'll be able to view a description of the various ant targets by executing from the root of this project:   ant -p
        - how is the ant script executed ?
            - there is a section towards the latter part of this document entitled:  "deploy BRMS runtime artifacts to JBoss EAP"
            - if provisioning a new BRMS environment, then this section explains the how to execute the ant script to do that
            - please ensure all of the previous steps outlined in this document have been completed prior to executing the ant script


  - why doesn't PFP leverage BRMS Standalone rather than BRMS Deployable ?
        - there are architectural decisions implemented in BRMS Standalone that are sufficient for a demo, but problably would not do well in production
        - BRMS Deployable provides maximum flexibility by allowing a software team to embed supported Drools and jbpm5 libraries 
          into a customer solution tailored toward their specific production requirements
        - the PFP team has taken advantage of the flexibility provided by BRMS Deployable and built one example of an optimized, fully-featured and
          easily administered BRMS production deployment.



INSTALL   :
    -- NOTE:  almost all of the following tasks can (and should probably be) automated via a kickstart provisioning script

    -- networking
        -- HOSTNAME
            -- ensure that target OS has a hostname (preferrably with relevance to this jbpm5 project) that is not 'localhost' or 'localhost.localdomain'
            -- a permanent change to the hostname of the operating system can be conducted as follows :
                    (as root) :  modify value of 'HOSTNAME' in :   vi /etc/sysconfig/network
                             init 6 (bounce the operating system)
        -- mapping in /etc/hosts
                -- ensure that the OS hostname is correctly mapped to the ethernet interface 
                    (as root) :  modify /etc/hosts such that it has entries similar to the following (example assumes 'fedora17-jbpm5' is OS hostname):

                        192.168.122.10  fedora17-jbpm5

        NOTE:  often times, the OS hostname will already be mapped to the localhost interface.  
            It is important to remove that mapping and ensure that only the mapping between the OS hostname and the ethernet NIC exists



    -- Red Hat Network (RHN)
        NOTE:  this section is only applicable if environment to be built is either on Red Hat Enterprise Linux (RHEL) 6.*

        -- RHN registration
                -- set web proxy for rhn_register
                    -- (as root)    vi /etc/sysconfig/rhn/up2date
                                        enableProxy=1
                                        httpProxy=http://<my.proxy.url>:8080
                -- (as root) :     rhn_register

        --  RHN channel modifications
                -- after system registration is complete, open any browser (from any computer) and log into http://rhn.redhat.com
                -- select your system and then click 'Alter Channel Subscriptions".  Select the following channels and click 'change subscriptions'
                    Base Channel
                        * Red Hat Enterprise Linux (v. 5 for 64-bit x86_64)
                    Release Channels for RHEL 5 for x86_64
                        * RHEL Supplementary (v5 for x86_64)
                    Additional Service Channels for RHEL 5 for x86_64
                        * JBoss Application Platform (v 5.x) for x86_64
                -- logout of Red Hat Network
                -- NOTE:  this can be done programmatically.  Example as follows :
                     yum install rhn-setup.noarch"  # to install rhn-channel
                     rhn-channel -u <my rhn login> -p <my passwd> -a jb-ewp-5-x86_64-server-5-rpm 
                     rhn-channel -u <my rhn login> -p <my passwd> -a rhel-x86_64-server-supplementary-5

        -- enable RHN Plugin
                -- it is possible that the access to the RHN repository is disabled.
                -- a disbled RHN repository becomes evident when executing 'yum update' and only the 'security' plugin appears enabled
                -- enable the RHN plugin in the following file :
                    /etc/yum/pluginconf.d/rhnplugin.conf



    -- Java Development Kit
        -- ensure that OpenJDK 1.7 is installed
           (as root) :     yum install java-1.7.0-openjdk
                           yum install java-1.7.0-openjdk-devel


    -- 'jboss' operating system user
        - there are some processFlowProvision steps that require root privledges.
        - the majority of steps should NOT be executed as root.
        - instead, processFlowProvision assumes an operating system user called 'jboss' that has non-root privledges
            (as root) : useradd -u 600 -g 100 -d /home/jboss -m -s /bin/bash jboss
            (as root) : passwd jboss




    --  $JBOSS_PROJECTS directory
        -- make a 'jbossProjects' directory and have it owned by jboss:jboss
            (as root) :     mkdir -p /opt/jbossProjects/jboss
                            mkdir /opt/jbossProjects/downloads
                            chown -R jboss:100 /opt/jbossProjects

    --  git and wget
        (as root)   :   yum install git wget


    - pull ProcessFlowProvision from github
        (as jboss)  :   cd /opt/jbossProjects
                        git clone https://github.com/jboss-sso/processFlowProvision.git


    --  required PFP shell environment variables
          JBOSS_HOME        :   location of JBoss EAP
          PFP_HOME          :   location of process flow provision project
          JBOSS_PROJECTS    :   default location of PFP service task repository and guvnor filesystem
      - these environment variables are set via the standard ~/.bashrc or in (.bash_profile)
      - processFlowProvision maintains a template bashrc
      - execute the following to copy the template bashrc to the 'jboss' users home directory :
            (as jboss):     cd /opt/jbossProjects/processFlowProvision
                            cp ~/.bashrc ~/.bashrc.bak
                            cp conf/shell/bashrc ~/.bashrc
                            ( review the newly copied ~/.bashrc and modify where appropriate )
                            source ~/.bashrc

                                
  --  firewall configuration
        - external clients to PFP communicate with it via several ports
        - subequently, it important that firewalls be configured to allow traffic through those designated ports
        - PFP includes a sample modified iptables config file in:  $PFP_HOME/conf/iptables/iptables
        - this sample iptables includes modifications to allow for Tomcat, HornetQ, PostgreSQL and JNP traffic
                (as root) :     cp /etc/sysconfig/iptables /etc/sysconfig/iptables.bak 
                                cp /opt/jbossProjects/processFlowProvision/conf/iptables/iptables /etc/sysconfig
                                chkconfig --level 2345 iptables on
                                service iptables restart

        - the alternative to configuring a firewall is to simply turn off the firewall, if desired:
                (as root) :     chkconfig --level 2345 iptables off
                                service iptables stop


                                
     -- Apache Ant
        -- this project requires Apache Ant v. 1.8.3 (or more recent) along with the ant-contrib library

        -- if Ant v. 1.8.3 is not already installed, download from the following : http://ant.apache.org/bindownload.cgi

        -- upon completion of download, unzip apache-ant-1.8.3-bin.zip  to the '$JBOSS_PROJECTS/' directory
            (as jboss):
                unzip $JBOSS_PROJECTS/downloads/apache-ant-1.8.3-bin.zip -d $JBOSS_PROJECTS/

        - ant-contrib is already included in $PFP/lib/ant .... so nothing more to do in that regard


        -- network considerations for Apache Ant (optional if behind corporate firewall)
            -- the processFlowProvision build attempts to download via the internet several components to include guvnor, 'designer' and the bpm gwt console
            -- subsequently, Ant will need to be configured to route internet requests through a web proxy if build environment is behind a corporate firewall
            -- the 'ANT_OPTS' environment variable, such as the following, is used to configuring networking for Ant :
                ANT_OPTS="-Dhttps.proxyHost=<my.proxy.host> -Dhttps.proxyPort=8080 -Dhttp.proxyHost=<my.proxy.host> -Dhttp.proxyPort=8080"



    --  postgresql RDBMS
                (as root) :     yum install postgresql
                                yum install postgresql-server
                                yum install postgresql-jdbc

            --  ensure that postgresql 'service' is on at runlevels 3,4 & 5
                (as root) :     chkconfig --level 345 postgresql on
            --  change password of 'postgres' operating system user to 'postgres'
                (as root) :      passwd postgres
          
            --  ensure that postgresql 'service' is automatically started at boot (Fedora 16+)
                (as root) :     postgresql-setup initdb
                (as root) :     systemctl enable postgresql.service
                (as root) :     systemctl start postgresql.service

            --  start the postgresql service (RHEL 6)
                (as root) :     service postgresql initdb
                                service postgresql start

            --  switch user to 'postgres' and create necessary databases
                su - postgres
                createdb jbpm
                createdb jbpm_bam
                createdb guvnor
            -- as 'postgres' user, modify socket that postgresql will listen on
                -- modify the following configuration file  :   /var/lib/pgsql/data/postgresql.conf 
                -- at the following property :                  listen_addresses = '*'
                -- example is provided in :                     conf/postgresql/postgresql.conf
            -- as 'postgres' user, modify network permissions for remote connections to postgresql
                -- modify the following configuration file  :   /var/lib/pgsql/data/pg_hba.conf
                -- at the following property :                  host    all     all     <network address>/16  md5
                -- example is provided in :                     conf/postgresql/pg_hba.conf
            -- as 'postgres' user, create users and passwords in postgresql RDBMS
                psql -d postgres -f /opt/jbossProjects/processFlowProvision/conf/postgresql/processFlowProvision.sql

            -- bounce postgresql server process
                -- (as root) service postgresql restart

            -- enable DRL logging in Postgresql (OPTIONAL)
                -- (as postgres) vi /var/lib/pgsql/data/postgresql.conf
                    -- uncomment 'log_statement' and modify its value to 'all'.  An example as follows :
                        log_statement = 'all'
                -- (as root)    service postgresql reload


    -- messaging
        - hornetq 2.2.16 is provided out-of-the-box with jboss-eap-6.0.0    ..... which is sufficient
        - multi-cast cluster routing 
            -- route HornetQ broadcast traffic to a specific network interface card (if Hornetq is bound to a NIC that is not the default for the OS)
            -- (as root) : route add -net 231.0.0.0 netmask 255.0.0.0 eth0


    - deploy jBPM5/PFP "core" and "brms-webs" artifacts to JBoss EAP
        (as jboss)
            cd $JBOSS_PROJECTS/processFlowProvision
            vi build.properties    (please review/modify properties as appropriate as explained in this configuration file)
            execute:   ant

            NOTE:  executing the default ant target will attempt to download the following files (if they do not already exist) 
                   and place in the $PFP_HOME/target/lib directory :
                1)  brms-p-5.3.1.GA-deployable-ee6.zip
                2)  BZ887847.zip
                3)  jboss-eap-6.1.0.zip
                4)  soa-6.0.0.Alpha-redhat-2.zip

            if for whatever reason there are network issues related to the automate attempt to download these files, then these files can
            be downloaded manually and copied over to the $PFP_HOME/target/lib directory



POST INSTALL ADMINISTRATION

    pfp-core-0 jvm
        - there should be no stack traces in the following log file :
            $JBOSS_HOME/domain-${organization.name}/servers/pfp-core-0/log/server.log

    databases
        - log into your jbpm and jbpm_bam databases and check for tables
        - those tables were created when JPA persistence of knowledgeSession, task and bam functionality detected that the tables did not exist
        - what about OOB scripts for jbpm tables ?
            - it is advised that the safe way is not create the schema by yourself. 
            - Let BRMS/jBPM generate it, export the schema in a script and then you can use this schema to apply in your other environments for example
            - The schema in the documentation does not say about things related to database features like oracle sequences
            - So, doing an export of the schema after it's generation is more appropriate.

    jboss-brms
        -- point browser to the following URL   :  http://<$HOSTNAME>:8080/jboss-brms/org.drools.guvnor.Guvnor/Guvnor.jsp
            - userId / password = admin/brms   or  jboss/brms
            
            -- building "defaultPackage"
                - it's been observed that defaultPackage needs to be built in Guvnor even if that package will not being used
                - if this is a fresh Guvnor install, then navigate Guvnor as follows :
                    Knowledge Bases --> Packages --> defaultPackage --> Edit --> "Build package"

        -- BPMN2 designer
            -- embedded as part of Drools is an actively developed BPMN2 designer using HTML 5 technologies
            -- this BPMN2 web designer is a collaborative effort between Red Hat and Intalio
            -- the codename for the project is called 'wapama' and is a successor to the now deprecated 'oryx' project
            -- project home page can be found here :
                -- http://www.wapama.net/team.html
            -- video tutorials on designer are made available at vimeo by the user : tsurdilo
            -- a nice tutorial on custom 'Service Tasks' in designer can be found here :  http://vimeo.com/26126678
            -- example bpmn2 diagrams developed by designer can be found in the jbpm5 source code :  $JBOSS_PROJECTS/jboss/jbpm/jbpm-examples/src/main/resources


    HornetQ queues
        -- upon start-up of JBossEAP, several queues will be created in the local HornetQ messaging provider
        -- newly created HornetQ objects can be inspected on a running HornetQ environment via the jdk 'jconsole' utility
        -- (as jboss)    :   jconsole --> New Connection dialogue box should appear --> 'org.hornetq.integration.bootstrap.HornetQBootstrap' process --> connect
                             MBeans --> org.hornetq --> Queue --> Core

           the following queues should be avaliable :
            -  jms.queue.processFlow.asyncWorkingMemoryLogger   :   used for transport of BAM events
            -  jms.queue.processFlow.knowledgeSessionQueue      :   used for async interface to knowledge session service


    service tasks repository
        - this project contains a demo of how to create an internal service task repository
        - please reference privateServiceTaskRepo/README.txt for more details


    BRMS business-central console
        -- point browser to the following URL   :  http://<$HOSTNAME>:8080/business-central/app.html
        -- login as:  jboss / brms


    REST interfaces
        -- this jbpm5 provisioning process includes the installation of a runtime component called the : 'gwt-console-server' (different than the jbpm-console)
        -- point browser to the following URL   :  http://<$HOSTNAME>:8080/gwt-console-server/rs/server/resources
        -- Of possible interest is that the above URL is the root path to a variety of jbpm5 RESTful resources
        -- The jbpm5 process management resources exposed via this API are predominantly exposed as application/JSON representations
        -- business-central REST API :
            http://<hostName>:8080/business-central-server/rs/server/resources/jbpm



    web app security
        - notice that by defualt the BRMS web apps share the same security-domain :  other
        - which means that by default, users and roles configured in the following files are used at runtime by the brms web apps:
            1)  $JBOSS_HOME/domain-<organizationName>/configuration/application-users.properties
            2)  $JBOSS_HOME/domain-<organizationName>/configuration/application-roles.properties

        - these two property files are manipuated by PFP at build time and the originals are kept here :
            1)  $PFP_HOME/conf/jboss/application-users.properties
            2)  $PFP_HOME/conf/jboss/application-roles.properties

        - if needing to make changes to the default users and roles set by PFP, then the following two options exist:
            1)  make static changes to $PFP_HOME/conf/jboss/application-*.properties and run:  ant
            2)  create your own CLI scripts that layer on top of PFP and further customize the runtime property files in $JBOSS_HOME/domain-<organizationName>/configuration/

        test web app security
            curl -b cookies -L -d "j_username=jboss&j_password=brms" http://localhost:8080/business-central-server/j_security_check 


    database table maintenance
        - how to keep the database tables from growing infinitely in BRMS5.3.1
            - https://access.redhat.com/site/solutions/240423
        - TO-DO:  update with PFP specifics


                
    Eclipse Tooling                
        -- NOTES:  
            -- it's recommended that creation of process definitions be done via the guvnor web designer web app rather than via any of the eclipse plugins
                provided by jbpm5
            -- if still interested in using a jbpm5 eclipse plugin, then this section applies ... otherwise skip
            -- Eclipse does not need to be co-located in the same virtual machine as the jbpm5 runtime 
            -- also, probably best to use a fresh install of eclipse-java-helios that does not have any other JBoss related components such as JBoss Tools

        -- BPMN2 Modeler Project
            -- http://eclipse.org/projects/project.php?id=soa.bpmn2-modeler
            -- CodeHoop was contracted by Red Hat to create an initial version of this editor
            -- We (Red Hat) then further extended this codebase and moved it to eclipse.org
            -- So the codebase referred to here:  https://github.com/imeikas/BPMN2-Editor-for-Eclipse/wiki ..... is an early version of this extended version
            -- So this extended version is the same editor as referred to here:
                -- http://kverlaen.blogspot.com/2011/02/new-bpmn-20-eclipse-editor.html
   
        -- legacy Drools-Flow Eclipse plugin
            -- This legacy Drools-Flow eclipse plugin is a combination of two plugins, located at:
                -- http://anonsvn.jboss.org/repos/jbosstools/trunk/bpmn/plugins/org.jboss.tools.jbpm/
                -- https://github.com/droolsjbpm/droolsjbpm-tools/tree/master/drools-eclipse
            -- if interested in using the legacy Drools Flow plugin for eclipse (rather than the new BPMN2 editor from codehoop) , execute the following : 
                -- ensure that the 'eclipse.home' property is set correctly in $JBOSS_PROJECTS/processFlowProvision/build.properties
                -- (as jboss) cd $JBOSS_PROJECTS/processFlowProvision
                -- ant local.install.drools-eclipse.into.eclipse  (note:  this will install both jbpm5 and guvnor plugins into eclipse)

        -- Eclipse Guvnor Tools (EGT)
            -- the Eclipse Guvnor Tools can be used with either the BPMN2 Visual Editor or the legacy Drools-Flow Eclipse plugin
            -- user documentation on Eclipse Guvnor Tools can be found here :
                -- http://docs.jboss.org/drools/release/5.2.0.CR1/drools-guvnor-docs/html_single/index.html#d0e1173
            -- if installing the Eclipse Guvnor Tools, execute the following :
                --  (as jboss) cd $JBOSS_PROJECTS/processFlowProvision
                -- ensure that the 'eclipse.home' property is set correctly in $JBOSS_PROJECTS/processFlowProvision/build.properties
                -- ant local.install.drools-eclipse.into.eclipse  (note:  this will install both jbpm5 and guvnor plugins into eclipse)
                
        -- To install Drools-Flow and Guvnor plugins manually on a Windows Eclipse client
            -- Download the following to a temporary directory :
                https://repository.jboss.org/nexus/content/repositories/snapshots/org/drools/org.drools.updatesite/5.4.0-SNAPSHOT/org.drools.updatesite-5.4.0-20111010.153938-36-assembly.zip
            -- Unzip the contents of the zip file into the temporary directory (which creates both a plugins and a features subdirectory in addition to a number of files in the root of the temp directory).
            -- Copy the contents of the 'plugins' and 'features' subdirectories to the equivalent subdirectories under the <eclipse home> directory.

            -- start eclipse ....should be able to navigate to the following :
                Window --> Show View --> other --> Guvnor --> Guvnor Repositories




modifications to runtime directory structure
  - $JBOSS_HOME/server/default-${organization.name}             
        - PFP enabled JBoss runtime
        - created with execution of 'ant' from $JBOSS_PROJECTS/processFlowProvision
        - new directory is cloned from $JBOSS_HOME/server/default and then modified with BRMS and PFP enhancements


  - $JBOSS_HOME/server/default-${organization.name}/deploy/${organization.name}
        - hot deployable runtime directory with most BRMS and PFP artifacts

  
  - $JBOSS_HOME/server/default-${organization.name}/deploy/properties-service.xml
        - MBean that registers various BRMS and PFP system properties


  - $JBOSS_HOME/server/default-${organization.name}/lib/${organization.name}
        - location of all BRMS and PFP static libraries
        - JBoss adds these static libraries to its unifiedclassloader where these classes are accessible by all runtime artifacts





Guvnor Configurations
    1) background :
        - importing an existing BPMN2 into a specific package in guvnor can be accomplished as per :
            - https://hudson.jboss.org/hudson/view/Drools%20jBPM/job/jbpm/lastSuccessfulBuild/artifact/jbpm-distribution/target/jbpm-5.4.0-SNAPSHOT-docs-build/jbpm-docs/html_single/index.html#d0e4528
        - in PFP, a KnowledgeAgent is instantiated and is a client to Drools Guvnor
        - this KnowledgeAgent is used in PFP to instantiate a single instance of a KnowledgeBase
        - other components in PFP, such as the gwt-console-server, use the knowledgeSessionService as a proxy to Guvnor
        - the KnowledgeAgent needs to be explicity configured to query for your specific packages in Guvnor
        - for example, if you've created (or intend to create) a Guvnor package called:  org.my.package
          then, the the KnowledgeAgent needs to be configured to query guvnor using the package name as a key:  org.my.package
        - once the process definition is imported into guvnor and the package is built in guvnor, then the knowledgeAgent in PFP will detect that change
        - runtime configurations for the knowledgeAgent in PFP can be found in $PFP_HOME/build.properties :
            1)  guvnor.packages
            2)  guvnor.connect.timeout
            3)  guvnor.read.timeout

    2) guvnor.packages property
        - please pay particular attention to the following property in $PFP_HOME/build.properties:  guvnor.packages   
        - this is a comma seperated list of guvnor packages that the PFP KnowledgeSessionService will use to query Guvnor to build the Drools knowledgeBase
        - please configure this property with a list of one or more of your Guvnor packages
        - once a change to this property is made, please execute the following :
            1)  ensure the JBoss EAP on that machine is shutdown
            2)  from the root of PFP, execute :   ant
            3)  restart JBoss EAP specifying the default-${organizational.name} configuration
        - these instructions super-cede similar instructions provided in Chapter 16 of the jbpm5 User Guide:  Process Repository

    3)  printKnowledgeBaseContent() helper function
        - the PFP IKnowledgeSessionService interface exposes a function called:  printKnowledgeBaseContent()
        - the purpose of this function is to view which packages (and the process definitions of each package) that the 
          knowledgeSessionService's knowledgeBase is aware of
        - this function can be invoked remotely by an EJB client
        - this function is also exposed as part of an MBean with object name of :  org.jboss.processFlow:type=KnowledgeSessionService
            - subsequently, it this methoed can be invoked via the jmx-console (if using JBoss EAP 5* ) or jconsole (if using JBoss EAP 6*)



Guvnor automation
    -   guvnor-webapp-core/src/test/java/org/drools/guvnor/server/jaxrs/BasicPackageResourceTest.java
    - curl -u admin:admin -HAccept:application/xml http://ratwaterIBM:8080/jboss-brms/rest/packages       > allPackages.xml
    - curl -u admin:admin $HOSTNAME:8080/jboss-brms/rest/packages/org.jboss.processFlow/binary   > org.jboss.processFlow_LATEST.pkg
    - curl -u admin:admin $HOSTNMAME:8080/jboss-brms/rest/packages/test-pfp-snapshot/binary   > org.jboss.processFlow_test-pfp-snapshot.pkg 

    - Publish Drools artifacts from a production environment
        - https://community.jboss.org/wiki/PublishDroolsartifactsfromaproductionenvironment
    - Guvnor REST API
        - http://docs.jboss.org/drools/release/5.3.0.Beta1/drools-guvnor-docs/html/ch09.html#d0e1695

Process Versioning
     what actually happens is that active jbpm5 process instances continue to be dependent on the contents of the KnowledgeBase.
     so if the KnowledgeBase is updated with an updated process definition (let's call it org.acme.myProcess.v1), then active process instances are going to follow the behavior of this newly UPDATED process definition
 
     so if this is not desired, the current workaround is to change the process definition id.
     for instance, modify your existing process definition such that the process id (previously org.acme.myProcess.v1) is changed to  org.acme.myProcess.v2.
     subsequently, after compiling the package in guvnor, you'll now have two different  process definitions compiled and included in the KnowledgeBase (via the KnowledgeAgent).
     previous instances that where started using org.acme.myProcess.v1 will continue to use that older process definition.
     new pInstances that are started using org.acme.myProcess.v2 will now use the new process definition.

    The "version" field is just a String which is not used by the engine, it should be used only as a metadata for documentation purposes.



Work Item Handlers in ProcessFlowProvision
    in jbpm5, there are both bpmn2 editor and runtime considerations when working with work item handlers
    bpmn2 editor considerations as follows :
        1)  the procedure for defining Service Tasks is the same whether using the jbpm5 web "Designer" or legacy Eclipse Drools-Flow Plugin
        2)  defining Service Tasks
            -- please see the following section of the jbpm5 User Guide:  6.5.2 Service Task
        3)  private Service Task Repositories
            - please see :   processFlowProvision/privateServiceTaskRepo/README.txt


    runtime considerations as follows :
        -- Creating & configuring custom work item handlers in processFlowProvision is almost identical to creating custom work item handlers in stock BRMS
        -- Background Documentation :       12.1.3  Registering your own service handlers
        -- The following are a few processFlowProvision additions :

        1)  programmatically registered work item handlers
          -- every StatefulKnowledgeSession managed by the processFlowProvision knowledgeSessionService is automatically registered with
           the following workItemHandlers :
            1)  "Human Task"    :   org.jboss.processFlow.tasks.WSHumanTaskHandler
            2)  "Skip Task"     :   org.jboss.processFlow.tasks.PFPSkipTaskHandler
            3)  "Fail Task"     :   org.jboss.processFlow.tasks.PFPFailTaskHandler
            4)  "Email"         :   org.jboss.processFlow.tasks.PFPEmailWorkItemHandler


        2)  defining configurable work item handlers
          -- jbpm5 allows for more than one META-INF/drools.session.conf in the runtime classpath 
            -- subsequently, there is the potential for mulitple locations that define custom work item handlers
          -- the abiity to have multiple META-INF/drools.session.conf files on the runtime classpath most likely will lead to 
                 increased difficulty isolating problems encountered with defining and registering custom work item handlers
          -- processFlowProvision/build.properties includes the following property:  space.delimited.workItemHandler.configs
          -- rather than allowing for multiple locations to define custom work item handlers, 
                use of the 'space.delimited.workItemHandler.configs' property centralalizes where to define additional custom workItemHandlers 
          -- please see documentation provided for that property in the build.properties


        3)  org.jboss.processFlow.knowledgeService.IKnowledgeSessionService.printWorkItemHandlers()
          -- helper function to troubleshoot runtime configuration and classpath issues regarding custom work item handlers
          -- please see the javadocs for the 'printWorkItemHandlers' function for IKnowledgeSessionService


Task Validation in PFP
    - jbpm5 allows for use of a org.jbpm.task.service.UserGroupCallback implementation to determine :
        - boolean existsUser(String userId);
        - boolean existsGroup(String groupId);
        - List<String> getGroupsForUser(String userId, List<String> groupIds, List<String> allExistingGroupIds)
    - when enabled, this UserGroupCallback functionality will automatically load non-existent users and groups into the OrganizationEntity table
    - doing so avoids the need for loading of legacy LoadUsers.mvel and LoadGroups.mvel while at the same time ensuring referential integrity
        of the task database is maintained
    - in PFP, we do enable the UserGroupCallback functionality of jbpm5 and implement a simplistic:  org.jboss.processFlow.tasks.PFPUserGroupCallback
    - the purpose of enabling the UserGroupCallback functionality in PFP is simply to avoid having to pre-load Users and Groups into the OrganizationEntity table
    - in PFP, actual task validation can occur (where/when needed on a customer basis) in the EJB3 tier
    - delegating security to the EJB3 tier provides PFP with the following :
        1)  a standards based security implementation across all PFP functionality :  knowledgeSessionService, taskService and bamService



deploy-time customizations to PFP EJB services
  - all PFP services are deployed in the JBOSS deploy directory as exploded jars
  - this allows for easy accessibility to the EJB (and JBoss extension) descriptor files at deploy time 



asynch messaging in PFP
    - there is lots of confusion as to where and why PFP leverages asynch messaging 
    - the $PFP_HOME/README.txt briefly discusses where messaging is used ... but hopefully this paragraph clarifies further
    - where messaging is NOT used in PFP :
        - jbpm5 includes various "transport" implementations for human task lifecycle management
        - possible "transport" implementations include Mina, Hornetq Core, JMS and "Local"
        - PFP does not use any of the above "transport" implementations for human task lifecycle management
        - instead, PFP exposes a Human Task API based on EJB3
        - the implementation of this PFP Human Task API leverages the jbpm5 TaskServiceSession directly and in that sense is very similar
            to the new "Local" implementation provided by jbpm5
        - PFP currently does not leverage the "Local" implementation only because our implementation pre-dates the newer "Local" implementation
        - on our TO-DO list is to still expose the same EJB3 based Human Task API but leverage the jbpm5 "Local" implementation internally
        - but back to why PFP does NOT use a messaging provider as the transport for Human Task lifecycle management ....
            1)  single-threaded
                - both the jbpm5 Hornetq Core and JMS Task Server implementations are single-threaded
                - neither is implemented as an MDB and there is no thread management in either of these Task Servers that would allow for concurrency
                - so our performance tests have highlighted that both of these Task Server implementations quickly become a performance bottleneck
            2)  complexity
                - the jbpm5 Hornetq Core and JMS Task implementations are too complex for our needs
                - sometimes complexity is needed, but in this case the added de-bugging/administraton of these implementations has been too costly

    - where messaging IS used in PFP :
        - as per the jbpm5 ProcessEventListener interface, the jbpm5 process engine can fire events at various stages in the lifecycle of a process instance
        - one ProcessEventListener implementation that can be registered with the jbpm5 process engine is PFP's:  org.jboss.processFlow.bam.AsyncBAMProducer
        - as the name implies, this ProcessEventListener implementation fires events with process instance data that will subsequently be used to populate
            a BAM database
        - the jbpm5 base product has a similar ProcessEventListener implementation that also populates a BAM database with process instance data
        - the difference between the two implementations, however, is that the org.jboss.processFlow.bam.AsyncBAMProducer sends these BAM events to 
            an asynch messaging provider (either Hornetq or RH-M) rather than inserting BAM events immediately into a RDBMS
        - the reason for this async BAM approach is performance
            - with BAM reporting turned off, the core jbpm5 process engine is lightning fast and stable
            - PFP attempts to limit performance degradation of the jbpm5 process engine while still supporting BAM reporting
            - the journalling file system of either Hornetq or RH-M can be significantly faster than a RDBMS ... subsequently PFP sends its 
                BAM events to a messaging broker
            - PFP implements a BAMService MDB that ultimately consumes BAM events and inserts into a different BAM data wharehouse in batch


in general, what does the PFP ant script do ???
    - returns AS7 environment to original state (promoting a repeatable runtime environment)
    - configures AS7 modules from drools, jbpm5 and PFP libraries
    - configures AS7 modules of either mysql or postgresql libraries
    - creates an AS7 server-group called "brms-webs-group" with appropriate jvm and port settings to support the deployment of guvnor, designer and bpm-console
    - configures the following AS7 datasource pools from either mysql or postgresql drivers:
        1) guvnor-cp
        2)  jbpm-core-cp
        3)  jbpm-bam-cp
    - downloads latest community drools guvnor, bpm-console and web designer releases (if not already present on local drive)
    - provisions an AS7 server called "domain-brmsWebs" that includes guvnor, bpm-console and web designer artifacts
    - configures embedded Hornetq such that its journal, paging and large-message directories could potentially be directed to different hard-disk partitions
    - configures Hornetq queue used to support PFP's async BAM event producer / consumer architecture
    - creates an AS7 server-group called "pfp-core-group" with appropriate jvm and port settings to support deployment of PFP runtime services
    - provisions an AS7 server called "domain-pfp" that includes PFP's bam, humanTask and knowledgeSession services





remote client examples
    - one of the challenges for new developers and admins attempting to leverage Process Flow Provision is invoking its EJB services
    - the functionality in $PFP_HOME/pfpServicesTest attempts to reduce this learning curve by providing the following examples :
        1)  test.standaloneTask
                - contains an example of conducting a lookup of the PFP kSessionService and taskService from a standalone remote EJB client 
                - implements the 'EJB client API' approach documented here:  https://docs.jboss.org/author/display/AS71/EJB+invocations+from+a+remote+client+using+JNDI
                - procedure
                    - command terminal 1 
                        - tail -f $JBOSS_HOME/domain-${organization.name}/servers/pfp-core-0/log/server.log
                    - command terminal 2 :  
                        - cd $PFP_HOME
                        - ant test.standaloneTask
        2)  test.webTask
                - contains an example of conducting a lookup of the PFP kSessionService and taskService from a web archive in the same domain
                - implements the approach documented here:  https://docs.jboss.org/author/display/AS71/EJB+invocations+from+a+remote+server+instance#
                - deployment
                    - pfp-core server hosts the PFP ksession, task and bam services
                    - brms-webs server is used to host a test web archive called :  pfpServicesTest.war
                    - the GETful functions of pfpServicesTest.war will invoke PFP EJB services hosted in pfp-core server
                - procedure
                    - create new application user
                        - new application user used for the following purposes :
                            1)  web access to business-central hosted in brmsWebs
                                - the 'creditController' role is the group that the human task in simpleTask.bpmn is assigned to
                            2)  access to the JBoss Remoting subsystem of pfpCore
                        - cd $JBOSS_HOME
                        - ./bin/add-user.sh
                            - What type of user do you wish to add?             :   (b) Application User
                            - Username                                          :   pfp
                            - Password                                          :   brms
                            - What roles do you want this user to belong to?    :   creditController

                    - start brmsWebs server
                        - cd $PFP_HOME
                        - ant local.provision.brms.webs -Drefresh.master=true

                    - monitor brmsWebs log file
                        - tail -f domain-${organization.name}/servers/brms-webs/log/server.log

                    - deploy pfpServicesTest.war into brmsWebs
                        - pfpServicesTest.war has a sample http GETful application that will invoke the ksession service running on pfpCore

                        - open a different terminal window
                        - cd $PFP_HOME
                        - ant test.webTask 

                    - review brmsWebs log files
                        - should now see the following statement brmsWebs log file
                            DEBUG [org.jboss.as.ee.structure.EJBClientDescriptorParsingProcessor] Successfully parsed jboss-ejb-client.xml for deployment unit deployment "pfpServicesTest.war"
                        - should authentication problems occur, will see this error in terminal #1 :
                            ERROR [org.jboss.remoting.remote.connection] (Remoting "master:brms-webs" read-1) JBREM000200: Remote connection failed: javax.security.sasl.SaslException: Authentication failed: all available authentication mechanisms failed

                    - start pfpCore server (containing ksessionService) 
                        - ant local.provision.pfp.core

                    - invoke pfpServicesTest.war and proxy requests to ksessionService on pfpCore through ejb-security-realm
                        - curl $HOSTNAME:8080/pfpServicesTest/all 
                            - should return:  Great Success!!
                            - in the brmsWebs log, you'll also see various logs regarding claiming and completing a task
                            - look for the following indicating successful hand-shake between remote-outbound-connection from brmsWebs to JBoss Remoting on pfpCore:

13:43:27,517 INFO  [org.jboss.ejb.client.remoting] (ejb-client-remote-connection-reconnect-4-thread-1) EJBCLIENT000013: Successful version handshake completed for receiver context EJBReceiverContext{clientContext=org.jboss.ejb.client.EJBClientContext@4a08e396, receiver=Remoting connection EJB receiver [connection=Remoting connection <73f8dfc4>,channel=jboss.ejb,nodename=master:pfp-core]} on channel Channel ID ee2b32a0 (outbound) of Remoting connection 3c21fd47 to ratwaterIBM/192.168.122.1:4697



BIRT reporting
    - the BIRT report engine is integrated in with business-central-server.war
    - upon brmsWebs server start-up, statements similar to the following indicating that the BIRT reporting engine 
        is alive should be visible in $JBOSS_HOME/default-${organization.name}/servers/brms-webs/log/server.log

        INFO  [org.jboss.bpm.report.ReportFacade] (MSC service thread 1-14) BIRT home: /shared/source/jboss/jbossProjects/jboss/birt/ReportEngine
        INFO  [org.jboss.bpm.report.ReportFacade] (MSC service thread 1-14) Output dir: /shared/source/jboss/jbossProjects/jboss/birt/output/
        INFO  [org.jboss.bpm.report.ReportFacade] (MSC service thread 1-14) Report dir: /shared/source/jboss/jbossProjects/jboss/birt/
        INFO  [org.jboss.bpm.report.BirtService] (BirtService-Init) Creating BIRT service in the background



