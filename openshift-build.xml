<project name="pfp-openshift" >

    <target name="openshift.provision.both" >
        <echo message="service repository = ${service.repository}" />
        <echo message="openshift.domain.name = ${openshift.domain.name}" />
        <antcall target="openshift.provision.pfp.core" />
    </target>

    <!--    
        pass following parameters to this target :
        1)  openshift.bounce.servers  :   optional 
    -->
    <target name="openshift.provision.pfp.core" depends="openshift.provision.prep" >
        <delete dir="${openshift.pfpcore.app.location}" />
        <mkdir dir="${openshift.app.dir}" />
        <echo message="executing following command:  git clone -o ${openshift.domain.name} ${openshift.pfpcore.git.url} ${openshift.pfpcore.app.location}" />
        <exec executable="git" failonerror="true" >
           <arg value="clone"/>
           <arg value="-o"/>
           <arg value="${openshift.domain.name}"/>
           <arg value="${openshift.pfpcore.git.url}"/>
           <arg value="${openshift.pfpcore.app.location}"/>
        </exec>
        <antcall target="openshift.deploy.jboss.modules" >
            <param name="app.location" value="${openshift.pfpcore.app.location}"/>
        </antcall>
        <delete dir="${openshift.pfpcore.app.location}/.openshift/action_hooks" verbose="true" />
        <antcall target="filter">
            <param name="source.dir" value="conf/openshift/pfpcore"/>
            <param name="dest.dir" value="${openshift.pfpcore.app.location}/.openshift"/>
        </antcall>
        <delete file="${openshift.pfpcore.app.location}/pom.xml" />
        <delete file="${openshift.pfpcore.app.location}/.openshift/markers/java7" />
        <exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="copyFileToRemote"/>
           <arg value="-localDir=conf/jboss/"/>
           <arg value="-file=*.properties"/>
           <arg value="-sshUrl=${openshift.pfpcore.ssh.url}"/>
           <arg value="-remoteDir=${openshift.pfpcore.config.dir}"/>
        </exec>
        <copy todir="${openshift.pfpcore.app.location}/deployments" overwrite="true" >
            <fileset dir="${temp.pfp.services.dir}" >
                <include name="*.jar" />
                <include name="*.war" />
            </fileset>
        </copy>
        <antcall target="openshift.provision.brms.webs" />
        <if>
            <equals arg1="${openshift.rsync.to.gear}" arg2="true" />
            <then>
                <exec executable="bash" failonerror="true" dir="." >
                    <arg value="${development.base}/bin/openshift.sh"/>
                    <arg value="openshiftRsync"/>
                    <arg value="-localDir=${temp.brmsWebs.dir}/${console.server.name}/*"/>
                    <arg value="-sshUrl=${openshift.pfpcore.ssh.url}"/>
                    <arg value="-remoteDir=${openshift.pfpcore.config.dir}/deployments/${console.server.name}"/>
                    <arg value="-rsyncDelete=true"/>
                </exec> 
                <exec executable="bash" failonerror="true" dir="." >
                    <arg value="${development.base}/bin/openshift.sh"/>
                    <arg value="openshiftRsync"/>
                    <arg value="-localDir=${temp.brmsWebs.dir}/${console.name}/*"/>
                    <arg value="-sshUrl=${openshift.pfpcore.ssh.url}"/>
                    <arg value="-remoteDir=${openshift.pfpcore.config.dir}/deployments/${console.name}"/>
                    <arg value="-rsyncDelete=true"/>
                </exec> 
            </then>
            <else><echo message="will not rsync to gear" /></else>
        </if>
        <if>
            <equals arg1="${openshift.git.push.to.gear}" arg2="true" />
            <then>
                <exec executable="bash" failonerror="true" dir="." >
                <arg value="${development.base}/bin/openshift.sh"/>
                <arg value="push"/>
                <arg value="-localAppLocation=${openshift.pfpcore.app.location}"/>
                <arg value="-domainName=${openshift.domain.name}"/>
                </exec> 
            </then>
            <else><echo message="will not git push to gear" /></else>
        </if>
    </target>

    <target name="openshift.provision.brms.webs" >
        <!-- rsync to exploded web archives to :  ${openshift.jboss.cartridge.type}/tmp/deployments
            this directory will not get blown away when executing 'git push' on openshift app
        -->
        <exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="openshiftRsync"/>
           <arg value="-localDir=${temp.brmsWebs.dir}/${guvnor.name}/*"/>
           <arg value="-sshUrl=${openshift.pfpcore.ssh.url}"/>
           <arg value="-remoteDir=${openshift.pfpcore.config.dir}/deployments/${guvnor.name}"/>
           <arg value="-rsyncDelete=true"/>
        </exec>
        <exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="copyFileToRemote"/>
           <arg value="-localDir=${temp.brmsWebs.dir}"/>
           <arg value="-file=repository.xml"/>
           <arg value="-sshUrl=${openshift.pfpcore.ssh.url}"/>
           <arg value="-remoteDir=${openshift.pfpcore.config.dir}/guvnor"/>
        </exec>
        <exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="openshiftRsync"/>
           <arg value="-localDir=${temp.brmsWebs.dir}/${designer.name}/*"/>
           <arg value="-sshUrl=${openshift.pfpcore.ssh.url}"/>
           <arg value="-remoteDir=${openshift.pfpcore.config.dir}/deployments/${designer.name}"/>
           <arg value="-rsyncDelete=true"/>
        </exec>
    </target>


    <target name="openshift.bounce.pfpcore" description="" >
        <antcall target="openshift.stop.jboss" >
            <param name="ssh.url" value="${openshift.pfpcore.ssh.url}"/>
        </antcall>
        <antcall target="openshift.start.jboss" >
            <param name="ssh.url" value="${openshift.pfpcore.ssh.url}"/>
        </antcall>
    </target>

    <target name="openshift.stop.jboss" >
        <fail unless="ssh.url" message="stop.jboss:  need to pass 'ssh.url' property" />
        <exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="stopJboss"/>
           <arg value="-sshUrl=${ssh.url}"/>
        </exec> 
    </target>
    <target name="openshift.start.jboss" >
        <fail unless="ssh.url" message="start.jboss:  need to pass 'ssh.url' property" />
        <exec executable="${development.base}/bin/openshift.sh" failonerror="true" >
            <arg value="startJboss"/>
            <arg value="-remoteJbossHome=${openshift.remote.jboss.home}"/>
            <arg value="-sshUrl=${ssh.url}"/>
        </exec> 
    </target>

    <target name="openshift.refreshGuvnor" >
        <fail unless="ssh.url" message="os.refreshGuvnor:  need to pass 'ssh.url' property" />
        <fail unless="os.data.dir" message="os.refreshGuvnor:  need to pass 'os.data.dir' property" />
        <antcall target="filter">
            <param name="source.dir" value="conf/brmsWebs/drools-guvnor"/>
            <param name="file.name" value="repository.xml"/>
            <param name="dest.dir" value="target/tmp"/>
        </antcall>
        <!--exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="refreshGuvnor"/>
           <arg value="-sshUrl=${ssh.url}"/>
           <arg value="-remoteDir=${os.data.dir}/guvnor"/>
        </exec --> 

    </target>

    <target name="openshift.deploy.jboss.modules" >
        <fail unless="app.location" message="openshift.deploy.jboss.modules:  need to pass 'app.location' property" />
        <delete dir="${openshift.pfpcore.app.location}/.openshift/config/modules" />
        <antcall target="configure.jboss.modules" />
        <exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="openshiftRsync"/>
           <arg value="-localDir=${temp.jboss.dir}/*"/>
           <arg value="-sshUrl=${openshift.pfpcore.ssh.url}"/>
           <arg value="-remoteDir=${openshift.pfpcore.config.dir}"/>
           <arg value="-rsyncDelete=true"/>
        </exec> 
    </target>

    <target name="openshift.provision.db" >
        <if>    
            <equals arg1="${jdbc.module.name}" arg2="postgresql" />
            <then><property name="command" value="executePostgresqlScript" /></then>
            <else><property name="command" value="executeMysqlScript" /></else>
        </if>   
        <exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="${command}"/>
           <arg value="-serverIpAddr=${brmsWebs.db.ip.addr}"/>
           <arg value="-managementPort=3306"/>
           <arg value="-sshUrl=${brmsWebs.db.ssh.url}"/>
           <arg value="-user=${brmsWebs.db.root.user}"/>
           <arg value="-password=${brmsWebs.db.root.password}"/>
           <arg value="-localDir=conf/postgresql" />
           <arg value="-file=processFlowProvision.sql" />
           <arg value="-remoteDir=/tmp" />
        </exec> 
    </target>
    <target name="openshift.provision.prep" >
        <if>
            <not><available file="${temp.pfp.services.dir}" type="dir" /></not>
            <then>
                <antcall target="unzip.brms.deployable" />
                <antcall target="apply.BZ887847" />
                <antcall target="local.stop.master"  />
                <antcall target="pfp.clean" />
                <mkdir dir="${install.home}/lib" />
                <antcall target="clone.jboss" />
                <antcall target="configure.jboss.modules" />
            </then>
            <else><echo message="openshiftPrep() found ${temp.pfp.services.dir} ... no need to rebuild" /></else>
        </if>
    </target>
    <target name="openshift.provision.accounts.with.brms" description="" >
        <exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="provisionAccountsWithPFP"/>
           <arg value="-bldwProvisionProjectLocation=${bldw.provision.project.location}"/>
           <arg value="-skipFullBuild=${openshift.skip.full.build}"/>
           <arg value="-refreshExistingAccountOnly=${openshift.refresh.existing.account.only}"/>
        </exec> 
    </target>

    <target name="openshift.set.RSA.key.and.namespace.on.accounts" description="" >
        <exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="setRSAkeyAndNamespaceOnAccounts"/>
           <arg value="-rsaPublicKeyPath=${rsa.public.key.path}"/>
        </exec> 
    </target>

    <target name="openshift.list.dig.results.for.each.account" description="" >
        <exec executable="bash" failonerror="true" dir="." >
           <arg value="${development.base}/bin/openshift.sh"/>
           <arg value="listDigResultsForEachAccount"/>
        </exec> 
    </target>

</project>
